{"list":[{"title":"FactoryFarm","link":"<a href=\"FactoryFarm.html\">FactoryFarm</a>","description":"<p>A class to create and use factories</p>"},{"title":"MockServer","link":"<a href=\"MockServer.html\">MockServer</a>","description":"<p>Sets properties needed internally</p>\n<ul>\n<li>factoryFarm: a pre-existing factory to use on this server</li>\n<li>responseOverrides: An array of alternative responses that can be used to override the ones that would be served\nfrom the internal store.</li>\n</ul>"},{"title":"Model","link":"<a href=\"Model.html\">Model</a>","description":"<p>Initializer for model</p>"},{"title":"Store","link":"<a href=\"Store.html\">Store</a>","description":"<p>Initializer for Store class</p>"},{"title":"addIncluded","link":"<a href=\"global.html#addIncluded\">addIncluded</a>","description":"<p>JSONAPI uses <code>included</code> only at the top level. To recursively add models to this array,\nwe preserve the top-level object and pass it in to the next round\nBecause objects can have multiple relationships, we do a check of the array to make sure\nit's not already there.</p>"},{"title":"circularFetchError","link":"<a href=\"global.html#circularFetchError\">circularFetchError</a>","description":"<p>Will throw an error if <code>fetch</code> is called from the mockServer, usually due to a <code>POST</code> or <code>PATCH</code> called by a <code>save</code></p>"},{"title":"circularFindError","link":"<a href=\"global.html#circularFindError\">circularFindError</a>","description":"<p>Throws an error if MockServer tries to <code>findOne</code> or <code>findAll</code> from itself.</p>"},{"title":"combineRacedRequests","link":"<a href=\"global.html#combineRacedRequests\">combineRacedRequests</a>","description":"<p>Avoids making racing requests by blocking a request if an identical one is\nalready in-flight. Blocked requests will be resolved when the initial request\nresolves by cloning the response.</p>"},{"title":"deriveIdQueryStrings","link":"<a href=\"global.html#deriveIdQueryStrings\">deriveIdQueryStrings</a>","description":"<p>Splits an array of ids into a series of strings that can be used to form\nqueries that conform to a max length of URL_MAX_LENGTH. This is to prevent 414 errors.</p>"},{"title":"diff","link":"<a href=\"global.html#diff\">diff</a>","description":"<p>deeply compare objects a and b and return object paths for attributes\nwhich differ. it is important to note that this comparison is biased\ntoward object a. object a is walked and compared against values in\nobject b. if a property exists in object b, but not in object a, it\nwill not be counted as a difference.</p>"},{"title":"disallowFetches","link":"<a href=\"global.html#disallowFetches\">disallowFetches</a>","description":"<p>Overrides store methods that could trigger a <code>fetch</code> to throw errors. MockServer should only provide data for fetches, never call a fetch itself.</p>"},{"title":"makeDate","link":"<a href=\"global.html#makeDate\">makeDate</a>","description":"<p>convert a value into a date, pass Date or Moment instances thru\nuntouched</p>"},{"title":"parseErrorPointer","link":"<a href=\"global.html#parseErrorPointer\">parseErrorPointer</a>","description":"<p>Parses the pointer of the error to retrieve the index of the\nrecord the error belongs to and the full path to the attribute\nwhich will serve as the key for the error.</p>\n<p>If there is no parsed index, then assume the payload was for\na single record and default to 0.</p>\n<p>ex.\nerror = {\ndetail: &quot;Foo can't be blank&quot;,\nsource: { pointer: '/data/1/attributes/options/foo' },\ntitle: 'Invalid foo'\n}</p>\n<p>parsePointer(error)</p>\n<blockquote>\n<p>{\nindex: 1,\nkey: 'options.foo'\n}</p>\n</blockquote>"},{"title":"parseErrors","link":"<a href=\"global.html#parseErrors\">parseErrors</a>","description":"<p>Parses JSONAPI error objects from a fetch response.\nIf the response's body is undefined or is not formatted with a top-level <code>errors</code> key\ncontaining an array of errors, it builds a JSONAPI error object from the response status\nand a <code>errorMessages</code> configuration.</p>\n<p>Errors that are returned which contain a status also have their <code>detail</code> overridden with\nvalues from this configuration.</p>"},{"title":"requestUrl","link":"<a href=\"global.html#requestUrl\">requestUrl</a>","description":"<p>Build request url from base url, endpoint, query params, and ids.</p>"},{"title":"serverResponse","link":"<a href=\"global.html#serverResponse\">serverResponse</a>","description":"<p>Encodes models into full compliant JSONAPI payload, as if it were being sent with all\nrelevant relationships and inclusions. The resulting payload will look like\n{\ndata: {\nid: '1',\ntype: 'zones',\nattributes: {},\nrelationships: {},\n},\nincluded: []\n}</p>"},{"title":"singularizeType","link":"<a href=\"global.html#singularizeType\">singularizeType</a>","description":"<p>Singularizes record type</p>"},{"title":"stringifyIds","link":"<a href=\"global.html#stringifyIds\">stringifyIds</a>","description":"<p>Coerces all ids to strings</p>"},{"title":"validateProperties","link":"<a href=\"global.html#validateProperties\">validateProperties</a>","description":"<p>Maps the passed-in property names through and runs validations against those properties</p>"},{"title":"walk","link":"<a href=\"global.html#walk\">walk</a>","description":"<p>recursively walk an object and call the <code>iteratee</code> function for\neach property. returns an array of results of calls to the iteratee.</p>"},{"title":"wrapResponse","link":"<a href=\"global.html#wrapResponse\">wrapResponse</a>","description":"<p>Wraps response JSON or object in a Response object that is itself wrapped in a\nresolved Promise. If no status is given then it will fill in a default based on\nthe method.</p>"}]}