{
    "project": {
        "name": "mobx-async-store",
        "description": "Asyc Data Store for mobx",
        "url": "https://github.com/artemis-ag/mobx-async-store",
        "version": "4.0.0-rc1"
    },
    "files": {
        "src/decorators/attributes.js": {
            "name": "src/decorators/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/decorators/relationships.js": {
            "name": "src/decorators/relationships.js",
            "modules": {},
            "classes": {
                "RelatedRecordsArray": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Model.js": {
            "name": "src/Model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Store.js": {
            "name": "src/Store.js",
            "modules": {},
            "classes": {
                "Store": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/schema.js": {
            "name": "src/schema.js",
            "modules": {},
            "classes": {
                "Schema": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils.js": {
            "name": "src/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "RelatedRecordsArray": {
            "name": "RelatedRecordsArray",
            "shortname": "RelatedRecordsArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/decorators/relationships.js",
            "line": 205,
            "description": "An array that allows for updating store references and relationships",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "the array to extend",
                    "type": "Array"
                },
                {
                    "name": "record",
                    "description": "the record with the referenced array",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "the property on the record that references the array",
                    "type": "String"
                }
            ]
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Model.js",
            "line": 80
        },
        "Store": {
            "name": "Store",
            "shortname": "Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Store.js",
            "line": 14,
            "description": "Defines the Artemis Data Store class.",
            "is_constructor": 1
        },
        "Schema": {
            "name": "Schema",
            "shortname": "Schema",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/schema.js",
            "line": 1,
            "description": "Utility class used to store the schema\nof model attribute definitions"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/decorators/attributes.js",
            "line": 5,
            "description": "returns `true` as long as the `value` is not `null`, `undefined`, or `''`",
            "itemtype": "method",
            "name": "isPresent",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/attributes.js",
            "line": 16,
            "description": "returns `true` as long as the `value` is not `null`, `undefined`, or `''`",
            "itemtype": "method",
            "name": "validatePresence",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/attributes.js",
            "line": 31,
            "description": "Helper method for apply the correct defaults to attributes.",
            "itemtype": "method",
            "name": "defaultValueForDescriptor",
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/attributes.js",
            "line": 51,
            "description": "Defines attributes that will be serialized and deserialized. Takes one argument, a class that the attribute will be coerced to.\nThis can be a Javascript primitive or another class. `id` cannot be defined as it is assumed to exist.\nAttributes can be defined with a default.\n```\nclass Todo extends Model {",
            "itemtype": "method",
            "name": "attribute",
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/attributes.js",
            "line": 85,
            "description": "Defines validations for attributes that will be applied before saving. Takes one argument, a function to validate\nthe attribute. The default validator is `presence`: not `null`, `undefined`, or `''`.\n```\nfunction nonzero(value => value !== 0)\n\nclass Todo extends Model {\n  `@validates`\n  `@attribute`(nonzero) numberOfAssignees\n}\n```",
            "itemtype": "method",
            "name": "validates",
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 34,
            "description": "Syntactic sugar of relatedToMany relationship. Basically\neverything the same except it only returns a single record.",
            "itemtype": "method",
            "name": "relatedToOne",
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 56,
            "description": "Handles getting polymorphic records or only a specific\ntype if specified.",
            "itemtype": "method",
            "name": "getRelatedRecords",
            "params": [
                {
                    "name": "record",
                    "description": "the record with the relationship",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "the related property to set",
                    "type": "String"
                },
                {
                    "name": "modelType",
                    "description": "an override of the modelType",
                    "type": "String"
                }
            ],
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 121,
            "description": "Handles getting polymorphic has_one/belong_to.",
            "itemtype": "method",
            "name": "getRelatedRecord",
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 146,
            "description": "Handles setting polymorphic has_one/belong_to.\n- Validates the related record to make sure it inherits from `Model` class\n- Sets the relationship\n- Attempts to find an inverse relationship, and if successful adds it as well",
            "itemtype": "method",
            "name": "setRelatedRecord",
            "params": [
                {
                    "name": "record",
                    "description": "the record with the relationship",
                    "type": "Object"
                },
                {
                    "name": "relatedRecord",
                    "description": "the record that will be related",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "the related property to set",
                    "type": "String"
                },
                {
                    "name": "modelType",
                    "description": "an override of the modelType",
                    "type": "String"
                }
            ],
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 236,
            "description": "Adds a record to the array, and updates references in the store, as well as inverse references",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "relatedRecord",
                    "description": "the record to add to the array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the original relatedRecord",
                "type": "Object"
            },
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/decorators/relationships.js",
            "line": 290,
            "description": "Removes a record from the array, and updates references in the store, as well as inverse references",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "relatedRecord",
                    "description": "the record to remove from the array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the original relatedRecord",
                "type": "Object"
            },
            "class": "RelatedRecordsArray"
        },
        {
            "file": "src/Model.js",
            "line": 19,
            "description": "Maps the passed-in property names through and runs validations against those properties",
            "itemtype": "method",
            "name": "validateProperties",
            "params": [
                {
                    "name": "model",
                    "description": "the model to check",
                    "type": "Object"
                },
                {
                    "name": "propertyNames",
                    "description": "the names of the model properties to check",
                    "type": "Array"
                },
                {
                    "name": "propertyDefinitions",
                    "description": "a hash map containing validators by property",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an array of booleans representing results of validations",
                "type": "Array"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 84,
            "description": "Initializer for model",
            "itemtype": "method",
            "name": "constructor",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 102,
            "description": "The type of the model. Defined on the class. Defaults to the underscored version of the class name\n(eg 'calendar_events').",
            "itemtype": "property",
            "name": "type",
            "static": 1,
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 110,
            "description": "The canonical path to the resource on the server. Defined on the class.\nDefaults to the underscored version of the class name",
            "itemtype": "property",
            "name": "endpoint",
            "static": 1,
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 117,
            "description": "True if the instance has been modified from its persisted state\n\nNOTE that isDirty does _NOT_ track changes to the related objects\nbut it _does_ track changes to the relationships themselves.\n\nFor example, adding or removing a related object will mark this record as dirty,\nbut changing a related object's properties will not mark this record as dirty.\n\nThe caller is reponsible for asking related objects about their\nown dirty state.\n\n```\nkpi = store.add('kpis', { name: 'A good thing to measure' })\nkpi.isDirty\n=> true\nkpi.name\n=> \"A good thing to measure\"\nawait kpi.save()\nkpi.isDirty\n=> false\nkpi.name = \"Another good thing to measure\"\nkpi.isDirty\n=> true\nawait kpi.save()\nkpi.isDirty\n=> false\n```",
            "itemtype": "property",
            "name": "isDirty",
            "type": "{Boolean}",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 152,
            "description": "A list of any attribute paths which have been changed since the previous snapshot\n\nconst todo = new Todo({ title: 'Buy Milk' })\ntodo.dirtyAttributes\n=> []\ntodo.title = 'Buy Cheese'\ntodo.dirtyAttributes\n=> ['title']\ntodo.options = { variety: 'Cheddar' }\ntodo.dirtyAttributes\n=> ['title', 'options.variety']",
            "itemtype": "method",
            "name": "dirtyAttributes",
            "return": {
                "description": "dirty attribute paths",
                "type": "Array"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 185,
            "description": "A list of any relationship paths which have been changed since the previous snapshot\nWe check changes to both ids and types in case there are polymorphic relationships\n\nconst todo = new Todo({ title: 'Buy Milk' })\ntodo.dirtyRelationships\n=> []\ntodo.note = note1\ntodo.dirtyRelationships\n=> ['relationships.note']",
            "itemtype": "method",
            "name": "dirtyRelationships",
            "return": {
                "description": "dirty relationship paths",
                "type": "Array"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 223,
            "description": "Have any changes been made since this record was last persisted?",
            "itemtype": "property",
            "name": "hasUnpersistedChanges",
            "type": "{Boolean}",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 232,
            "description": "True if the model has not been sent to the store",
            "itemtype": "property",
            "name": "isNew",
            "type": "{Boolean}",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 244,
            "description": "True if the instance is coming from / going to the server\n```\nkpi = store.find('kpis', 5)\n// fetch started\nkpi.isInFlight\n=> true\n// fetch finished\nkpi.isInFlight\n=> false\n```",
            "itemtype": "property",
            "name": "isInFlight",
            "type": "{Boolean}",
            "default": "false",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 261,
            "description": "A hash of errors from the server\n```\nkpi = store.find('kpis', 5)\nkpi.errors\n=> { authorization: \"You do not have access to this resource\" }\n```",
            "itemtype": "property",
            "name": "errors",
            "type": "{Object}",
            "default": "{}",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 274,
            "description": "a list of snapshots that have been taken since the record was either last persisted or since it was instantiated",
            "itemtype": "property",
            "name": "snapshots",
            "type": "{Array<Snapshot>}",
            "default": "[]",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 283,
            "description": "restores data to its last snapshot state\n```\nkpi = store.find('kpis', 5)\nkpi.name\n=> \"A good thing to measure\"\nkpi.name = \"Another good thing to measure\"\nkpi.rollback()\nkpi.name\n=> \"A good thing to measure\"\n```",
            "itemtype": "method",
            "name": "rollback",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 300,
            "description": "restores data to its last persisted state or the oldest snapshot\nstate if the model was never persisted",
            "itemtype": "method",
            "name": "rollbackToPersisted",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 310,
            "description": "creates or updates a record.",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 364,
            "description": "Replaces the record with the canonical version from the server.",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 384,
            "description": "Checks all validations, adding errors where necessary and returning `false` if any are not valid\nDefault is to check all validations, but they can be selectively run via options:\n - attributes - an array of names of attributes to validate\n - relationships - an array of names of relationships to validate",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 408,
            "description": "deletes a record from the store and server",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "an empty promise with any success/error status",
                "type": "Promise"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 475,
            "description": "The current state of defined attributes and relationships of the instance\nReally just an alias for attributes\n```\ntodo = store.find('todos', 5)\ntodo.title\n=> \"Buy the eggs\"\nsnapshot = todo.snapshot\ntodo.title = \"Buy the eggs and bacon\"\nsnapshot.title\n=> \"Buy the eggs and bacon\"\n```",
            "itemtype": "method",
            "name": "snapshot",
            "return": {
                "description": "current attributes",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 497,
            "description": "Sets previous snapshot to current snapshot",
            "itemtype": "method",
            "name": "setPreviousSnapshot",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 506,
            "description": "the latest snapshot",
            "itemtype": "method",
            "name": "previousSnapshot",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 517,
            "description": "the latest persisted snapshot or the first snapshot if the model was never persisted",
            "itemtype": "method",
            "name": "previousSnapshot",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 526,
            "description": "take a snapshot of the current model state.\nif persisted, clear the stack and push this snapshot to the top\nif not persisted, push this snapshot to the top of the stack",
            "itemtype": "method",
            "name": "_takeSnapshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 547,
            "description": "set the current attributes and relationships to the attributes\nand relationships of the snapshot to be applied. also reset errors",
            "itemtype": "method",
            "name": "_applySnapshot",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 564,
            "description": "shortcut to get the static",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "current attributes",
                "type": "String"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 574,
            "description": "current attributes of record",
            "itemtype": "method",
            "name": "attributes",
            "return": {
                "description": "current attributes",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 592,
            "description": "Getter find the attribute definition for the model type.",
            "itemtype": "method",
            "name": "attributeDefinitions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 603,
            "description": "Getter find the relationship definitions for the model type.",
            "itemtype": "method",
            "name": "relationshipDefinitions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 614,
            "description": "Getter to check if the record has errors.",
            "itemtype": "method",
            "name": "hasErrors",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 624,
            "description": "Getter to check if the record has errors.",
            "itemtype": "method",
            "name": "hasErrors",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 634,
            "description": "Getter to just get the names of a records attributes.",
            "itemtype": "method",
            "name": "attributeNames",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 644,
            "description": "Getter to just get the names of a records relationships.",
            "itemtype": "method",
            "name": "relationshipNames",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 654,
            "description": "getter method to get the default attributes",
            "itemtype": "method",
            "name": "defaultAttributes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 671,
            "description": "getter method to get data in api compliance format\nTODO: Figure out how to handle unpersisted ids",
            "itemtype": "method",
            "name": "jsonapi",
            "return": {
                "description": "data in JSON::API format",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 799,
            "description": "Comparison by identity\nreturns `true` if this object has the same type and id as the\n\"other\" object, ignores differences in attrs and relationships",
            "itemtype": "method",
            "name": "isSame",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Model"
        },
        {
            "file": "src/Store.js",
            "line": 21,
            "description": "Observable property used to store data and\nhandle changes to state",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "default": "{}",
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 31,
            "description": "Observable property used to store values for most recent response headers\naccording to settings specified as `headersOfInterest`",
            "itemtype": "property",
            "name": "lastResponseHeaders",
            "type": "{Object}",
            "default": "{}",
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 43,
            "description": "Initializer for Store class",
            "itemtype": "method",
            "name": "constructor",
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 54,
            "description": "Adds an instance or an array of instances to the store.\n```\nkpiHash = { name: \"A good thing to measure\" }\nkpi = store.add('kpis', kpiHash)\nkpi.name\n=> \"A good thing to measure\"\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "the properties to use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the new record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 75,
            "description": "Given a set of properties and type, returns an object with only the properties\nthat are defined as attributes in the schema for that type.\n```\nproperties = { title: 'Do laundry', unrelatedProperty: 'Do nothing' }\npickAttributes(properties, 'todos')\n=> { title: 'Do laundry' }\n```",
            "itemtype": "method",
            "name": "pickAttributes",
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 93,
            "description": "Given a set of properties and type, returns an object with only the properties\nthat are defined as relationships in the schema for that type.\n```\nproperties = { notes: [note1, note2], category: cat1, title: 'Fold Laundry' }\npickRelationships(properties, 'todos')\n=> {\n      notes: {\n        data: [{ id: '1', type: 'notes' }, { id: '2', type: 'notes' }]\n      },\n      category: {\n        data: { id: '1', type: 'categories' }\n      }\n   }\n```",
            "itemtype": "method",
            "name": "pickRelationships",
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 133,
            "description": "Builds an instance of a model that includes either an automatically or manually created temporary ID, but does not add it to the store.\nDoes not support relationships, since they require references to objects in the store.\n```\nkpiHash = { name: \"A good thing to measure\" }\nkpi = store.build('kpis', kpiHash)\nkpi.name\n=> \"A good thing to measure\"\n```",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "the properties to use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the new record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 156,
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "json api attributes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Artemis Data record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 177,
            "itemtype": "method",
            "name": "addModels",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "array of data objects",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of ArtemisData records",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 187,
            "description": "Saves a collection of records via a bulk-supported JSONApi\nendpoint. All records need to be of the same type.",
            "itemtype": "method",
            "name": "bulkSave",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "{queryParams, extensions}",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 227,
            "description": "Adds a record from the store. We can't simply remove the record\nby deleting the records property/key via delete due to a bug\nin mobx.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "of record to remove",
                    "type": "String"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 241,
            "description": "Gets a record from the store, will not fetch from the server if it doesn't exist in store.\nIf given queryParams, it will check the cache for the record.",
            "itemtype": "method",
            "name": "getOne",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the record to get",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 264,
            "description": "Fetches record by `id` from the server and returns a Promise.",
            "async": 1,
            "itemtype": "method",
            "name": "fetchOne",
            "params": [
                {
                    "name": "type",
                    "description": "the record type to fetch",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the record to fetch",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 301,
            "description": "Finds a record by `id`.\nIf available in the store, it returns that record. Otherwise, it fetches the record from the server.\n\n  store.findOne('todos', 5)\n  // fetch triggered\n  => event1\n  store.findOne('todos', 5)\n  // no fetch triggered\n  => event1",
            "itemtype": "method",
            "name": "findOne",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the record to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "// TODO: make this always return a Promise",
                "type": "Promise||Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 331,
            "description": "Get all records with the given `type` and `ids` from the store. This will never fetch from the server.",
            "itemtype": "method",
            "name": "getMany",
            "params": [
                {
                    "name": "type",
                    "description": "the type to get",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "the ids of the records to get",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array of records",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 347,
            "description": "Fetch all records with the given `type` and `ids` from the server.",
            "itemtype": "method",
            "name": "fetchMany",
            "params": [
                {
                    "name": "type",
                    "description": "the type to get",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "the ids of the records to get",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise.resolve(records) or Promise.reject(status)",
                "type": "Promise"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 373,
            "description": "Finds multiple records of the given `type` with the given `ids` and returns them wrapped in a Promise.\nIf all records are in the store, it returns those.\nIf some records are in the store, it returns those plus fetches all other records.\nOtherwise, it fetches all records from the server.\n\n  store.findMany('todos', [1, 2, 3])\n  // fetch triggered\n  => [todo1, todo2, todo3]\n\n  store.findMany('todos', [3, 2, 1])\n  // no fetch triggered\n  => [todo1, todo2, todo3]",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "the ids of the records to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "// TODO: make this always return a Promise",
                "type": "Promise||Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 423,
            "description": "Builds fetch url based",
            "itemtype": "method",
            "name": "fetchUrl",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 437,
            "description": "Gets all records with the given `type` from the store. This will never fetch from the server.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array of records",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 454,
            "description": "Finds all records with the given `type`. Always fetches from the server.",
            "async": 1,
            "itemtype": "method",
            "name": "fetchAll",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise.resolve(records) or Promise.reject(status)",
                "type": "Promise"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 491,
            "description": "Finds all records of the given `type`.\nIf all records are in the store, it returns those.\nOtherwise, it fetches all records from the server.\n\n  store.findAll('todos')\n  // fetch triggered\n  => [todo1, todo2, todo3]\n\n  store.findAll('todos')\n  // no fetch triggered\n  => [todo1, todo2, todo3]\n\nQuery params can be passed as part of the options hash.\nThe response will be cached, so the next time `findAll`\nis called with identical params and values, the store will\nfirst look for the local result.\n\n  store.findAll('todos', {\n    queryParams: {\n      filter: {\n        start_time: '2020-06-01T00:00:00.000Z',\n        end_time: '2020-06-02T00:00:00.000Z'\n      }\n    }\n  })\n\n\nNOTE: A broader RFC is in development to improve how we keep data in sync\nwith the server. We likely will want to getAll and getRecords\nto return null if nothing is found. However, this causes several regressions\nin portal we will need to address in a larger PR for mobx-async-store updates.",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "type",
                    "description": "the type to find",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ queryParams }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise.resolve(records) or Promise.reject(status)",
                "type": "Promise"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 538,
            "description": "Clears the store of a given type, or clears all if no type given\n\n  store.reset('todos')\n  // removes all todos from store\n  store.reset()\n  // clears store",
            "itemtype": "method",
            "name": "reset",
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 561,
            "description": "Entry point for configuring the store",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "passed to constructor",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 573,
            "description": "Entry point for configuring the store",
            "itemtype": "method",
            "name": "initializeNetworkConfiguration",
            "params": [
                {
                    "name": "options",
                    "description": "for nextwork config",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 585,
            "description": "Entry point for configuring the store",
            "itemtype": "method",
            "name": "initializeNetworkConfiguration",
            "params": [
                {
                    "name": "options",
                    "description": "for nextwork config",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 599,
            "description": "Creates an obserable index with model types\nas the primary key\n\nObservable({ todos: {} })",
            "itemtype": "method",
            "name": "initializeObservableDataProperty",
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 621,
            "description": "Wrapper around fetch applies user defined fetch options",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 649,
            "description": "Gets type of collection from data observable",
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "observable type object structure",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 660,
            "description": "Gets individual record from store",
            "itemtype": "method",
            "name": "getRecord",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 680,
            "description": "Gets records for type of collection from observable\n\nNOTE: We only return records by unique id, this handles a scenario\nwhere the store keeps around a reference to a newly persisted record by its temp uuid.\nWe can't simply remove the temp uuid reference because other\nrelated models may be still using the temp uuid in their relationships\ndata object. However, when we are listing out records we want them\nto be unique by the persisted id (which is updated after a Model.save)",
            "itemtype": "method",
            "name": "getRecords",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of objects",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 701,
            "description": "Get multiple records by id",
            "itemtype": "method",
            "name": "getRecordsById",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array or records",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 717,
            "description": "Gets single from store based on cached query",
            "itemtype": "method",
            "name": "getCachedRecord",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 732,
            "description": "Gets records from store based on cached query",
            "itemtype": "method",
            "name": "getCachedRecords",
            "params": [
                {
                    "name": "type",
                    "description": "type of records to get",
                    "type": "String"
                },
                {
                    "name": "queryParams",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "optional param if only getting 1 cached record by id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of records",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 750,
            "description": "Gets records from store based on cached query",
            "itemtype": "method",
            "name": "getCachedIds",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of ids",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 765,
            "description": "Gets records from store based on cached query",
            "itemtype": "method",
            "name": "getCachedId",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of ids",
                "type": "Array"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 777,
            "description": "Helper to look up model class for type.",
            "itemtype": "method",
            "name": "getKlass",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "model class",
                "type": "Class"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 788,
            "description": "Creates or updates a model",
            "itemtype": "method",
            "name": "createOrUpdateModel",
            "params": [
                {
                    "name": "dataObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 828,
            "description": "Create multiple models from an array of data",
            "itemtype": "method",
            "name": "createModelsFromData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 850,
            "description": "Helper to create a new model",
            "itemtype": "method",
            "name": "createModel",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "model instance",
                "type": "Object"
            },
            "class": "Store"
        },
        {
            "file": "src/Store.js",
            "line": 871,
            "description": "Defines a resolution for an API call that will update a record or\nset of records with the data returned from the API",
            "itemtype": "method",
            "name": "updateRecords",
            "params": [
                {
                    "name": "a",
                    "description": "request to the API",
                    "type": "Promise"
                },
                {
                    "name": "records",
                    "description": "to be updated",
                    "type": "Model|Array"
                }
            ],
            "class": "Store"
        },
        {
            "file": "src/schema.js",
            "line": 25,
            "description": "Adds a validation to either the schema `structure` (for attributes) or `relations` (for relationships)",
            "itemtype": "method",
            "name": "addValidation",
            "params": [
                {
                    "name": "options",
                    "description": "includes `type`, `property`, and `validator`",
                    "type": "Object"
                }
            ],
            "class": "Schema"
        },
        {
            "file": "src/utils.js",
            "line": 24,
            "description": "Singularizes record type",
            "itemtype": "method",
            "name": "singularizeType",
            "params": [
                {
                    "name": "recordType",
                    "description": "type of record",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 40,
            "description": "Build request url from base url, endpoint, query params, and ids.",
            "itemtype": "method",
            "name": "requestUrl",
            "return": {
                "description": "formatted url string",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 67,
            "description": "Avoids making racing requests by blocking a request if an identical one is\nalready in-flight. Blocked requests will be resolved when the initial request\nresolves by cloning the response.",
            "itemtype": "method",
            "name": "combineRacedRequests",
            "params": [
                {
                    "name": "key",
                    "description": "the unique key for the request",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the function the generates the promise",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 106,
            "description": "convert a value into a date, pass Date or Moment instances thru\nuntouched",
            "itemtype": "method",
            "name": "makeDate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Date|Moment"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 118,
            "description": "recursively walk an object and call the `iteratee` function for\neach property. returns an array of results of calls to the iteratee.",
            "itemtype": "method",
            "name": "walk",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "iteratee",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 136,
            "description": "deeply compare objects a and b and return object paths for attributes\nwhich differ. it is important to note that this comparison is biased\ntoward object a. object a is walked and compared against values in\nobject b. if a property exists in object b, but not in object a, it\nwill not be counted as a difference.",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array<String>"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 154,
            "description": "Parses the pointer of the error to retrieve the index of the\nrecord the error belongs to and the full path to the attribute\nwhich will serve as the key for the error.\n\nIf there is no parsed index, then assume the payload was for\na single record and default to 0.\n\nex.\n  error = {\n    detail: \"Foo can't be blank\",\n    source: { pointer: '/data/1/attributes/options/foo' },\n    title: 'Invalid foo'\n  }\n\nparsePointer(error)\n> {\n    index: 1,\n    key: 'options.foo'\n  }",
            "itemtype": "method",
            "name": "parseErrorPointer",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the matching parts of the pointer",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "src/utils.js",
            "line": 190,
            "description": "Splits an array of ids into a series of strings that can be used to form\nqueries that conform to a max length of URL_MAX_LENGTH. This is to prevent 414 errors.",
            "itemtype": "method",
            "name": "deriveIdQueryStrings",
            "params": [
                {
                    "name": "ids",
                    "description": "an array of ids that will be used in the string",
                    "type": "Array"
                },
                {
                    "name": "restOfUrl",
                    "description": "the additional text URL that will be passed to the server",
                    "type": "String"
                }
            ],
            "class": ""
        }
    ],
    "warnings": []
}